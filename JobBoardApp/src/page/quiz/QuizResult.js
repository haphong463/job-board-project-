import React, { useEffect } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import { useDispatch, useSelector } from 'react-redux';
import { GlobalLayoutUser } from "../../components/global-layout-user/GlobalLayoutUser";
import { fetchQuizResultsThunk } from "../../features/quizSlice";
import "./QuizResult.css";
import successImage from "../../assets/images/Do-hoa-02.png";
import badImage from "../../assets/images/fail-1.png";

const QuizResult = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const { results, totalQuestions, quizId, score, status, error } = location.state || {};

  useEffect(() => {
    if (location.state && location.state.quizId) {
      dispatch(fetchQuizResultsThunk(location.state.quizId));
    }
  }, [location.state, dispatch]);

  const correctAnswersCount = results
    ? results.filter((result) => result.selectedAnswer === result.correctAnswer).length
    : 0;
  const percentage = totalQuestions > 0 ? ((correctAnswersCount / totalQuestions) * 100).toFixed(2) : 0;

  const images = {
    success: successImage,
    bad: badImage,
  };

  let message;
  let image;

  if (score <= 7) {
    image = images.bad;
    message = `B·∫°n ch∆∞a nh·∫≠n ƒë∆∞·ª£c ch·ª©ng ch·ªâ c·ªßa h·ªá th·ªëng do ch∆∞a l·ªçt Top 20% ·ª©ng vi√™n xu·∫•t s·∫Øc nh·∫•t . ƒê·ª´ng n·∫£n ch√≠, b·∫°n v·∫´n c√≤n 1 l·∫ßn l√†m l·∫°i b√†i ƒë√°nh gi√°. H√£y c·ªë g·∫Øng v∆∞·ª£t qua nh√©!`;
  } else {
    image = images.success;
    message = `Ch√∫c m·ª´ng b·∫°n ƒë√£ xu·∫•t s·∫Øc v∆∞·ª£t qua b√†i ƒë√°nh gi√° v√† l·ªçt v√†o Top 20% ·ª©ng vi√™n! üéâ
B·∫°n ƒë√£ ho√†n th√†nh t·∫•t c·∫£ c√°c y√™u c·∫ßu v√† ch·ª©ng t·ªè ƒë∆∞·ª£c s·ª± xu·∫•t s·∫Øc c·ªßa m√¨nh.
Ch√∫ng t√¥i r·∫•t vui m·ª´ng th√¥ng b√°o r·∫±ng b·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c ch·ª©ng ch·ªâ c·ªßa h·ªá th·ªëng.
Ch√∫c b·∫°n ti·∫øp t·ª•c th√†nh c√¥ng tr√™n con ƒë∆∞·ªùng s·ª± nghi·ªáp c·ªßa m√¨nh!`;
  }

  const handleGoBack = () => {
    navigate('/quiz');
  };

  if (status === 'loading') {
    return <div>Loading...</div>;
  }

  if (status === 'failed') {
    return <div>Error: {error}</div>;
  }

  return (
    <GlobalLayoutUser>
      <>
        <section
          className="section-hero overlay inner-page bg-image"
          style={{ backgroundImage: 'url("../../../../assets/images/hero_1.jpg")' }}
          id="home-section"
        >
          <div className="container">
            <div className="row">
              <div className="col-md-7">
                <h1 className="text-white font-weight-bold">JobBoard Skills</h1>
                <div className="custom-breadcrumbs">
                  <a href="/">Home</a> <span className="mx-2 slash">/</span>
                  <span className="text-white"><strong>Quiz</strong></span>
                </div>
              </div>
            </div>
          </div>
        </section>
        <div class="container">

        <div className="quiz-result-container">
          <h2>K·∫øt qu·∫£ b√†i thi</h2>
          <div className="result-score">
            <img src={image} alt="result" className="result-image" />
            <p className="result-message">{message.split('\n').map((line, index) => (
              <React.Fragment key={index}>{line}<br /></React.Fragment>
            ))}</p>
          </div>
          <div className="result-actions">
            <button className="btn btn-secondary" onClick={handleGoBack}>Quay l·∫°i trang danh s√°ch k·ªπ nƒÉng</button>
          </div>
        </div>
        </div>
      </>
    </GlobalLayoutUser>
  );
};

export default QuizResult;
